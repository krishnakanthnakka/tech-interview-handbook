(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{153:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return l})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return b})),r.d(t,"default",(function(){return o}));var n=r(1),a=r(6),i=(r(0),r(171)),l={id:"topics",title:"Topics"},c={id:"algorithms/topics",title:"Topics",description:"Arrays",source:"@site/../contents/algorithms/topics.md",permalink:"/tech-interview-handbook/algorithms/topics",editUrl:"https://github.com/krishnakanthnakka/tech-interview-handbook/edit/master/contents/../contents/algorithms/topics.md",lastUpdatedBy:"Yangshun Tay",lastUpdatedAt:1563155561},b=[{value:"Arrays",id:"arrays",children:[]},{value:"Strings",id:"strings",children:[]},{value:"Sorting",id:"sorting",children:[]},{value:"Linked Lists",id:"linked-lists",children:[]},{value:"Stacks",id:"stacks",children:[]},{value:"Queues",id:"queues",children:[]},{value:"Hash tables",id:"hash-tables",children:[]},{value:"Trees",id:"trees",children:[]},{value:"Binary Search Trees",id:"binary-search-trees",children:[]},{value:"Heaps / Priority Queues",id:"heaps--priority-queues",children:[]},{value:"Graphs",id:"graphs",children:[]},{value:"Dynamic Programming",id:"dynamic-programming",children:[]},{value:"System Design",id:"system-design",children:[]}],s={rightToc:b};function o(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"arrays"},"Arrays"),Object(i.b)("h2",{id:"strings"},"Strings"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Prefix trees (Tries)"),Object(i.b)("li",{parentName:"ul"},"Suffix trees"),Object(i.b)("li",{parentName:"ul"},"Suffix arrays"),Object(i.b)("li",{parentName:"ul"},"KMP"),Object(i.b)("li",{parentName:"ul"},"Rabin-Karp"),Object(i.b)("li",{parentName:"ul"},"Boyer-Moore")),Object(i.b)("h2",{id:"sorting"},"Sorting"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Bubble sort"),Object(i.b)("li",{parentName:"ul"},"Insertion sort"),Object(i.b)("li",{parentName:"ul"},"Merge sort"),Object(i.b)("li",{parentName:"ul"},"Quick sort"),Object(i.b)("li",{parentName:"ul"},"Selection sort"),Object(i.b)("li",{parentName:"ul"},"Bucket sort"),Object(i.b)("li",{parentName:"ul"},"Radix sort"),Object(i.b)("li",{parentName:"ul"},"Counting sort")),Object(i.b)("h2",{id:"linked-lists"},"Linked Lists"),Object(i.b)("h2",{id:"stacks"},"Stacks"),Object(i.b)("h2",{id:"queues"},"Queues"),Object(i.b)("h2",{id:"hash-tables"},"Hash tables"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Collision resolution algorithms")),Object(i.b)("h2",{id:"trees"},"Trees"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"BFS"),Object(i.b)("li",{parentName:"ul"},"DFS (inorder, postorder, preorder)"),Object(i.b)("li",{parentName:"ul"},"Height")),Object(i.b)("h2",{id:"binary-search-trees"},"Binary Search Trees"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Insert node"),Object(i.b)("li",{parentName:"ul"},"Delete a node"),Object(i.b)("li",{parentName:"ul"},"Find element in BST"),Object(i.b)("li",{parentName:"ul"},"Find min, max element in BST"),Object(i.b)("li",{parentName:"ul"},"Get successor element in tree"),Object(i.b)("li",{parentName:"ul"},"Check if a binary tree is a BST or not")),Object(i.b)("h2",{id:"heaps--priority-queues"},"Heaps / Priority Queues"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Insert"),Object(i.b)("li",{parentName:"ul"},"Bubble up"),Object(i.b)("li",{parentName:"ul"},"Extract max"),Object(i.b)("li",{parentName:"ul"},"Remove"),Object(i.b)("li",{parentName:"ul"},"Heapify"),Object(i.b)("li",{parentName:"ul"},"Heap sort")),Object(i.b)("h2",{id:"graphs"},"Graphs"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Various implementations",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Adjacency matrix"),Object(i.b)("li",{parentName:"ul"},"Adjacency list"),Object(i.b)("li",{parentName:"ul"},"Adjacency map"))),Object(i.b)("li",{parentName:"ul"},"Single-source shortest path"),Object(i.b)("li",{parentName:"ul"},"Dijkstra"),Object(i.b)("li",{parentName:"ul"},"Bellman-Ford"),Object(i.b)("li",{parentName:"ul"},"Topo sort"),Object(i.b)("li",{parentName:"ul"},"MST"),Object(i.b)("li",{parentName:"ul"},"Prim algorithm"),Object(i.b)("li",{parentName:"ul"},"Kruskal's algorithm"),Object(i.b)("li",{parentName:"ul"},"Union Find Data Structure"),Object(i.b)("li",{parentName:"ul"},"Count connected components in a graph"),Object(i.b)("li",{parentName:"ul"},"List strongly connected components in a graph"),Object(i.b)("li",{parentName:"ul"},"Check for bipartite graph")),Object(i.b)("h2",{id:"dynamic-programming"},"Dynamic Programming"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Count Change"),Object(i.b)("li",{parentName:"ul"},"0-1 Knapsack")),Object(i.b)("h2",{id:"system-design"},"System Design"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"http://www.hiredintech.com/system-design/"}),"http://www.hiredintech.com/system-design/")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023"}),"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/"}),"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/donnemartin/system-design-primer"}),"https://github.com/donnemartin/system-design-primer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"}),"https://github.com/jwasham/coding-interview-university/blob/master/extras/cheat%20sheets/system-design.pdf"))))}o.isMDXComponent=!0},171:function(e,t,r){"use strict";r.d(t,"a",(function(){return u})),r.d(t,"b",(function(){return d}));var n=r(0),a=r.n(n);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function b(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=a.a.createContext({}),o=function(e){var t=a.a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c({},t,{},e)),r},u=function(e){var t=o(e.components);return a.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=Object(n.forwardRef)((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,s=b(e,["components","mdxType","originalType","parentName"]),u=o(r),m=n,d=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return r?a.a.createElement(d,c({ref:t},s,{components:r})):a.a.createElement(d,c({ref:t},s))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,l=new Array(i);l[0]=m;var c={};for(var b in t)hasOwnProperty.call(t,b)&&(c[b]=t[b]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var s=2;s<i;s++)l[s]=r[s];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);